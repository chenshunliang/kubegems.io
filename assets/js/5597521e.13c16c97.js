"use strict";(self.webpackChunkkubegems_docs=self.webpackChunkkubegems_docs||[]).push([[6118],{3905:function(e,n,o){o.d(n,{Zo:function(){return c},kt:function(){return d}});var r=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function s(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?s(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function _(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var i=r.createContext({}),m=function(e){var n=r.useContext(i),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},c=function(e){var n=m(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,s=e.originalType,i=e.parentName,c=_(e,["components","mdxType","originalType","parentName"]),l=m(o),d=t,u=l["".concat(i,".").concat(d)]||l[d]||p[d]||s;return o?r.createElement(u,a(a({ref:n},c),{},{components:o})):r.createElement(u,a({ref:n},c))}));function d(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=o.length,a=new Array(s);a[0]=l;var _={};for(var i in n)hasOwnProperty.call(n,i)&&(_[i]=n[i]);_.originalType=e,_.mdxType="string"==typeof e?e:t,a[1]=_;for(var m=2;m<s;m++)a[m]=o[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}l.displayName="MDXCreateElement"},7955:function(e,n,o){o.r(n),o.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return _},metadata:function(){return m},toc:function(){return p}});var r=o(87462),t=o(63366),s=(o(67294),o(3905)),a=["components"],_={title:"\u914d\u7f6eMonitoring",hide_title:!0,sidebar_position:3,description:"\u5982\u4f55\u5c06 KubeGems \u4e0e\u5916\u90e8 Prometheus \u670d\u52a1\u96c6\u6210",keywords:["kubegems","kubernetes","prometheus","prometheus-operator"]},i=void 0,m={unversionedId:"installation/more-install-guides/monitoring",id:"installation/more-install-guides/monitoring",title:"\u914d\u7f6eMonitoring",description:"\u5982\u4f55\u5c06 KubeGems \u4e0e\u5916\u90e8 Prometheus \u670d\u52a1\u96c6\u6210",source:"@site/docs/installation/more-install-guides/monitoring.md",sourceDirName:"installation/more-install-guides",slug:"/installation/more-install-guides/monitoring",permalink:"/kubegems.io/docs/installation/more-install-guides/monitoring",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\u914d\u7f6eMonitoring",hide_title:!0,sidebar_position:3,description:"\u5982\u4f55\u5c06 KubeGems \u4e0e\u5916\u90e8 Prometheus \u670d\u52a1\u96c6\u6210",keywords:["kubegems","kubernetes","prometheus","prometheus-operator"]},sidebar:"tutorialSidebar",previous:{title:"\u914d\u7f6eInstaller",permalink:"/kubegems.io/docs/installation/more-install-guides/installer-config"},next:{title:"\u914d\u7f6eLogging",permalink:"/kubegems.io/docs/installation/more-install-guides/logging"}},c={},p=[{value:"\u914d\u7f6e Monitoring",id:"\u914d\u7f6e-monitoring",level:2},{value:"\u5916\u90e8 Prometheus",id:"\u5916\u90e8-prometheus",level:2},{value:"\u7981\u7528 Prometheus",id:"\u7981\u7528-prometheus",level:3},{value:"\u7981\u7528 AlertManager",id:"\u7981\u7528-alertmanager",level:3},{value:"\u914d\u7f6e Recording Rules",id:"\u914d\u7f6e-recording-rules",level:3}],l={toc:p};function d(e){var n=e.components,o=(0,t.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u914d\u7f6e-monitoring"},"\u914d\u7f6e Monitoring"),(0,s.kt)("hr",null),(0,s.kt)("p",null,"KubeGems \u9ed8\u8ba4\u5185\u7f6e\u4e86 Prometheus-Operator \u6765\u7ba1\u7406 Prometheus \u548c AlertManager \u670d\u52a1\uff0c\u60a8\u53ef\u4ee5\u5728 installer \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"core_plugins.prometheus")," \u4e2d\u5bf9 Prometheus \u8fdb\u884c\u4e2a\u6027\u5316\u914d\u7f6e\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"core_plugins:\n  details:\n    catalog: \u76d1\u63a7&\u544a\u8b66\n    description: KubeGems\u5e73\u53f0\u76d1\u63a7&\u544a\u8b66\u63a7\u5236\u5668,\u5305\u542bPrometheus\u548cAlertManager\u670d\u52a1.\n    version: v0.50.1-gems\n  enabled: true\n  namespace: gemcloud-monitoring-system\n  operator:\n    prometheus:\n      enabled: true\n      replicas: 1\n      retention: 30d\n      apply_rules: true\n      image:\n        tag: 2.27.1-debian-10-r16\n      resources:\n        cpu: 4000m\n        memory: 8Gi\n      persistent:\n        size: 50Gi\n        # Specify stralgeclass to use, local-path was default value\n        # storageclass: local-path\n\n      # If you need to interface to an external alertmanager service, disealed alertmanager and configured the host field\n      # Tips: host only support <ipaddress>:<ports>\n      #external_host: 172.16.0.1:9093\n    alertmanager:\n      enabled: true\n      replicas: 1\n      image:\n        tag: 0.22.2-debian-10-r2\n      retention: 146h\n      persistent:\n        size: 10Gi\n        # Specify stralgeclass to use, local-path was default value\n        # storageclass: local-path\n\n      # If you need to interface to an external alertmanager service, disealed alertmanager and configured the host field\n      # Tips: host only support <ipaddress>:<ports>\n      #external_host: 172.16.0.1:9093\n\n")),(0,s.kt)("br",null),(0,s.kt)("h2",{id:"\u5916\u90e8-prometheus"},"\u5916\u90e8 Prometheus"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"\u7981\u7528-prometheus"},"\u7981\u7528 Prometheus"),(0,s.kt)("p",null,"\u5982\u679c\u7528\u6237\u73af\u5883\u4e0b\u5df2\u5b58\u5728 prometheus \u670d\u52a1\uff0c\u53ef\u4ee5\u5728 installer \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"core_plugins.monitoring.promtheus.operator")," \u4e2d\u7981\u7528 prometheus \u670d\u52a1\uff0c\u5e76\u914d\u7f6e\u5916\u90e8 prometheus \u7684",(0,s.kt)("inlineCode",{parentName:"p"},"<IP>:<Port>"),"\u8fde\u63a5\u5730\u5740\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"core_plugins:\n  details:\n    catalog: \u76d1\u63a7&\u544a\u8b66\n    description: KubeGems\u5e73\u53f0\u76d1\u63a7&\u544a\u8b66\u63a7\u5236\u5668,\u5305\u542bPrometheus\u548cAlertManager\u670d\u52a1.\n    version: v0.50.1-gems\n  enabled: true\n  namespace: gemcloud-monitoring-system\n  operator:\n    prometheus:\n      enabled: false\n      # If you need to interface to an external alertmanager service, disealed alertmanager and configured the host field\n      # Tips: host only support <ipaddress>:<ports>\n      external_host: 172.16.0.1:9093\n")),(0,s.kt)("h3",{id:"\u7981\u7528-alertmanager"},"\u7981\u7528 AlertManager"),(0,s.kt)("p",null,"\u5982\u679c\u7528\u6237\u73af\u5883\u4e0b\u5df2\u5b58\u5728 alertmanager \u670d\u52a1\uff0c\u53ef\u4ee5\u5728 installer \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"core_plugins.monitoring.operator.alaertmanager")," \u4e2d\u7981\u7528 alertmanager \u670d\u52a1\uff0c\u5e76\u914d\u7f6e\u5916\u90e8 alertmanager \u7684",(0,s.kt)("inlineCode",{parentName:"p"},"<IP>:<Port>"),"\u8fde\u63a5\u5730\u5740\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"core_plugins:\n  details:\n    catalog: \u76d1\u63a7&\u544a\u8b66\n    description: KubeGems\u5e73\u53f0\u76d1\u63a7&\u544a\u8b66\u63a7\u5236\u5668,\u5305\u542bPrometheus\u548cAlertManager\u670d\u52a1.\n    version: v0.50.1-gems\n  enabled: true\n  namespace: gemcloud-monitoring-system\n  operator:\n    alertmanager:\n      enabled: false\n      # If you need to interface to an external alertmanager service, disealed alertmanager and configured the host field\n      # Tips: host only support <ipaddress>:<ports>\n      external_host: 172.16.0.1:9093\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"\u4fe1\u606f")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\u8bf7\u6c42\u5916\u90e8 prometheus \u670d\u52a1\u662f\u901a\u8fc7 kubernetes \u7684 external service \u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u80fd\u914d\u7f6e IP \u5730\u5740\u3002"))),(0,s.kt)("h3",{id:"\u914d\u7f6e-recording-rules"},"\u914d\u7f6e Recording Rules"),(0,s.kt)("p",null,"KubeGems \u5185\u90e8\u914d\u7f6e\u4e86\u5927\u91cf Prometheus Recording rules \u7528\u4e8e\u63d0\u9ad8\u67e5\u8be2\u901f\u5ea6\u3002\u7528\u6237\u9700\u8981\u5c06\u8fd9\u90e8\u5206 Recording rules\u914d\u7f6e\u5728\u81ea\u6709 Prometheus \u670d\u52a1\u4e2d\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'- record: gems_cluster_apiserver_qps\n  expr: sum(irate(apiserver_request_total[5m]))by(code)\n- record: gems_cluster_apiserver_response_duration_seconds # {verb!~"WATCH|CONNECT"}\n  expr: histogram_quantile(0.95, sum(irate(apiserver_request_duration_seconds_bucket[5m])) by (le, verb))\n- record: gems_cluster_etcd_qps\n  expr: sum(irate(etcd_request_duration_seconds_count[5m]))by(operation)\n- record: gems_cluster_etcd_response_duration_seconds\n  expr: histogram_quantile(0.95, sum(irate(etcd_request_duration_seconds_bucket[5m])) by (le, operation))\n\n# node cpu\n- record: gems_node_cpu_total_cores\n  expr: count(sum(node_cpu_seconds_total)by(cpu, host))by(host)\n- record: gems_node_cpu_usage_cores\n  expr: sum(irate(node_cpu_seconds_total{mode!="idle"}[5m]))by(host)\n- record: gems_node_cpu_usage_percent\n  expr: (gems_node_cpu_usage_cores / gems_node_cpu_total_cores) * 100\n# node memory\n- record: gems_node_memory_total_bytes\n  expr: sum(node_memory_MemTotal_bytes)by(host)\n- record: gems_node_memory_usage_bytes\n  expr: sum(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)by(host)\n- record: gems_node_memory_usage_percent\n  expr: (gems_node_memory_usage_bytes / gems_node_memory_total_bytes) * 100\n# node storage\n- record: gems_node_disk_total_bytes\n  expr: max(node_filesystem_size_bytes{device=~"/dev/.*", device!~"/dev/loop\\\\d+"})by(host, device)\n- record: gems_node_disk_usage_bytes\n  expr: max(node_filesystem_size_bytes{device=~"/dev/.*", device!~"/dev/loop\\\\d+"} - node_filesystem_avail_bytes{device=~"/dev/.*", device!~"/dev/loop\\\\d+"})by(host, device)\n- record: gems_node_disk_usage_percent\n  expr: (gems_node_disk_usage_bytes / gems_node_disk_total_bytes) * 100\n# node io\n- record: gems_node_disk_read_iops\n  expr: sum(irate(node_disk_reads_completed_total[5m]))by(host)\n- record: gems_node_disk_write_iops\n  expr: sum(irate(node_disk_writes_completed_total[5m]))by(host)\n- record: gems_node_disk_read_bps\n  expr: sum(irate(node_disk_read_bytes_total[5m]))by(host)\n- record: gems_node_disk_write_bps\n  expr: sum(irate(node_disk_written_bytes_total[5m]))by(host)\n# node network\n- record: gems_node_network_receive_bps\n  expr: sum(irate(node_network_receive_bytes_total{device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m]))by(host)\n- record: gems_node_network_send_bps\n  expr: sum(irate(node_network_transmit_bytes_total{device!~"^(cali.+|tunl.+|dummy.+|kube.+|flannel.+|cni.+|docker.+|veth.+|lo.*)"}[5m]))by(host)\n- record: gems_node_network_receive_errs_percent\n  expr: (irate(node_network_receive_errs_total[5m]) / irate(node_network_receive_packets_total[5m])) * 100\n- record: gems_node_network_send_errs_percent\n  expr: (irate(node_network_transmit_errs_total[5m]) / irate(node_network_receive_packets_total[5m])) * 100\n# node pod\n- record: gems_node_running_pod_count\n  expr: sum(gems_pod_status{phase="Running"})by(node)\n- record: gems_node_running_pod_percent\n  expr: (sum(gems_pod_status{phase="Running"})by(node) / sum(kube_node_status_allocatable_pods)by(node)) * 100\n\n# node load\n- record: gems_node_load1\n  expr: sum(node_load1)by(host)\n- record: gems_node_load5\n  expr: sum(node_load5)by(host)\n- record: gems_node_load15\n  expr: sum(node_load15)by(host)\n# pod status\n- record: gems_pod_status\n  expr: |\n    sum(kube_pod_status_phase * on(namespace, pod) group_left(host_ip, node, pod_ip) kube_pod_info > 0)\n    by(namespace, pod, phase, pod_ip, host_ip, node)\n- record: gems_pod_workload\n  # deployment\u7684owner_name\u6e90\u4e8ereplicaset\uff0c\u5e26\u6709\u540e\u7f00\uff0c\u5168\u90e8\u79fb\u9664\u540e\u7f00\u7684\u8bdd\u4f1a\u5f71\u54cdds\u548csts\uff0c\u6240\u4ee5\u5148\u52a0\u4e0aowner_kind\u518d\u9488\u5bf9deployment\u53bb\u540e\u7f00\n  expr: |\n    sum(label_replace(label_join(label_replace(kube_pod_owner{job="kube-state-metrics"},"owner_kind", "Deployment", "owner_kind", "ReplicaSet"), "workload",":","owner_kind","owner_name"), "workload","$1","workload","(Deployment:.+)-(.+)"))\n    by(namespace, pod, owner_kind, workload)\n\n# container cpu\n- record: gems_container_cpu_usage_cores\n  expr: |\n    sum(irate(container_cpu_usage_seconds_total{pod!="", image!=""}[5m]))by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_cpu_limit_cores\n  expr: |\n    sum(kube_pod_container_resource_limits_cpu_cores)by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_cpu_usage_percent\n  expr: (gems_container_cpu_usage_cores / gems_container_cpu_limit_cores) * 100\n\n# container memory\n- record: gems_container_memory_usage_bytes\n  expr: |\n    sum(container_memory_working_set_bytes{pod!="", image!=""})by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_memory_rss\n  expr: |\n    sum(container_memory_rss{pod!="", image!=""})by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_memory_limit_bytes\n  expr: |\n    sum(kube_pod_container_resource_limits_memory_bytes)by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_memory_usage_percent\n  expr: (gems_container_memory_usage_bytes / gems_container_memory_limit_bytes) * 100\n\n# container restart\n- record: gems_container_restart_times_last_5m\n  expr: sum(increase(kube_pod_container_status_restarts_total[5m]))by(namespace, pod, container)\n\n# container network\n- record: gems_container_network_receive_bps\n  expr: |\n    sum(irate(container_network_receive_bytes_total{pod!="", image!=""}[5m]))by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n- record: gems_container_network_send_bps\n  expr: |\n    sum(irate(container_network_transmit_bytes_total{pod!="", image!=""}[5m]))by(container, pod, namespace, node)\n    * on (namespace, pod) group_left(owner_kind,workload)\n    gems_pod_workload\n\n# pvc\n- record: gems_pvc_usage_bytes\n  expr: sum(kubelet_volume_stats_used_bytes)by(namespace, node, persistentvolumeclaim)\n- record: gems_pvc_total_bytes\n  expr: sum(kubelet_volume_stats_available_bytes)by(namespace, node, persistentvolumeclaim)\n- record: gems_pvc_usage_percent\n  expr: (gems_pvc_usage_bytes / gems_pvc_total_bytes) * 100\n- record: gems_pvc_inode_total\n  expr: sum(kubelet_volume_stats_inodes)by(namespace, node, persistentvolumeclaim)\n- record: gems_pvc_inode_used\n  expr: sum(kubelet_volume_stats_inodes_used)by(namespace, node, persistentvolumeclaim)\n\n# namespace\u3001environment\u3001project\u3001tenant\n- record: gems_namespace_labels\n  expr: |\n    sum(label_replace(label_replace(label_replace(kube_namespace_labels, "environment","$1", "label_gems_kubegems_io_environment", "(.*)"), "project","$1", "label_gems_kubegems_io_project", "(.*)"), "tenant","$1", "label_gems_kubegems_io_tenant", "(.*)"))\n    without(job, label_gems_kubegems_io_environment, label_gems_kubegems_io_project, label_gems_kubegems_io_tenant)\n- record: gems_namespace_cpu_usage_cores\n  expr: |\n    sum(gems_container_cpu_usage_cores)by(namespace)\n    * on(namespace) group_left(environment, project, tenant)\n    gems_namespace_labels\n- record: gems_namespace_memory_usage_bytes\n  expr: |\n    sum(gems_container_memory_usage_bytes)by(namespace)\n    * on(namespace) group_left(environment, project, tenant)\n    gems_namespace_labels\n- record: gems_namespace_network_receive_bps\n  expr: |\n    sum(gems_container_network_receive_bps)by(namespace)\n    * on(namespace) group_left(environment, project, tenant)\n    gems_namespace_labels\n- record: gems_namespace_network_send_bps\n  expr: |\n    sum(gems_container_network_send_bps)by(namespace)\n    * on(namespace) group_left(environment, project, tenant)\n    gems_namespace_labels\n- record: gems_namespace_pvc_usage_bytes\n  expr: |\n    sum(gems_pvc_usage_bytes)by(namespace)\n    * on(namespace) group_left(environment, project, tenant)\n    gems_namespace_labels\n\n# cert\n- record: gems_cert_expiration_remain_seconds\n  expr: sum(certmanager_certificate_expiration_timestamp_seconds - time())by(namespace, name)\n\n# istio\n- record: gems_istio_workload_request_qps\n  expr: |\n    sum(irate(istio_requests_total[5m]))\n    without(connection_security_policy, destination_app, destination_canonical_revision, destination_canonical_service, destination_principal, destination_service, instance, job, source_app, source_canonical_revision, source_canonical_service, source_principal)\n- record: gems_istio_workload_response_duration_seconds\n  expr: |\n    histogram_quantile(0.95, sum(irate(istio_request_duration_milliseconds_bucket[5m])) \n    without (connection_security_policy, destination_app, destination_canonical_revision, destination_canonical_service, destination_principal, destination_service, instance, job, source_app, source_canonical_revision, source_canonical_service, source_principal)) \n    / 1000\n- record: gems_istio_workload_request_bps\n  expr: |\n    sum(irate(istio_request_bytes_sum[5m]))\n    without(connection_security_policy, destination_app, destination_canonical_revision, destination_canonical_service, destination_principal, destination_service, instance, job, source_app, source_canonical_revision, source_canonical_service, source_principal)\n- record: gems_istio_workload_response_bps\n  expr: |\n    sum(irate(istio_response_bytes_sum[5m]))\n    without(connection_security_policy, destination_app, destination_canonical_revision, destination_canonical_service, destination_principal, destination_service, instance, job, source_app, source_canonical_revision, source_canonical_service, source_principal)\n\n# istio gateway\n- record: gems_istio_gateway_port_80_downstream_qps\n  expr: |\n    sum(irate(envoy_http_outbound_0_0_0_0_8080_downstream_rq[5m]))\n    by(namespace, pod, response_code_class)\n- record: gems_istio_gateway_port_80_downstream_response_duration_seconds\n  expr: |\n    histogram_quantile(0.95, sum(irate(envoy_http_outbound_0_0_0_0_8080_downstream_rq_time_bucket[5m]))by(namespace, pod, le)) \n    / 1000\n\n- record: gems_istio_gateway_port_443_downstream_qps\n  expr: sum(irate(envoy_http_outbound_0_0_0_0_8443_downstream_rq[5m]))by(namespace, pod, response_code_class)\n- record: gems_istio_gateway_port_443_downstream_response_duration_seconds\n  expr: |\n    histogram_quantile(0.95, sum(irate(envoy_http_outbound_0_0_0_0_8443_downstream_rq_time_bucket[5m]))\n    by(namespace, pod, le)) / 1000\n\n# observability logging\n- record: gems_logging_level_error\n  expr: |\n    sum(logging_level_error)by(namespace)\n    * on(namespace) group_left(label_gems_kubegems_io_environment, label_gems_kubegems_io_project, label_gems_kubegems_io_tenant)\n    kube_namespace_labels\n- record: gems_eventer\n  expr: |\n    sum(eventer)by(type,metadata_namespace)\n    * on(metadata_namespace) group_left(label_gems_kubegems_io_environment, label_gems_kubegems_io_project, label_gems_kubegems_io_tenant)\n    kube_namespace_labels\n- record: gems_eventer_component\n  expr: |\n    sum(eventer_component)by(source_component,metadata_namespace)\n    * on(metadata_namespace) group_left(label_gems_kubegems_io_environment, label_gems_kubegems_io_project, label_gems_kubegems_io_tenant)\n    kube_namespace_labels\n- record: gems_eventer_kind\n  expr: |\n    sum(eventer_kind)by(involvedObject_kind,metadata_namespace)\n    * on(metadata_namespace) group_left(label_gems_kubegems_io_environment, label_gems_kubegems_io_project, label_gems_kubegems_io_tenant)\n    kube_namespace_labels\n')))}d.isMDXComponent=!0}}]);